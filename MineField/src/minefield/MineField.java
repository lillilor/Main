/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minefield;

import java.awt.Dimension;
import java.util.HashMap;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;


/**
 *
 * @author lilli
 */
public class MineField extends javax.swing.JFrame implements ActionListener, MouseListener{

    int tileWidht;// = 20;
    int tileHeight;// = 20;
    int columns;// = 10;
    int rows;//  = 10;
    int minesPercent;
    boolean[][] MatrixField;// = new int [ width ] [ height ];
    HashMap componentMap;
    boolean loose = false;
    int totoalMines;
    int markedMines;
    
    int calls;
    Timer chrono;
    int seconds;
    boolean timeStarted;
    boolean initFromDialog;
    boolean gameStartPosition;
    boolean devMode;
    /**
     * Creates new form DialogParams
     */
    public MineField()
    {
        initComponents();
        Image img;
                     
        try
        {
            img = ImageIO.read(getClass().getResource("/resources/MineField.png"));
            this.setIconImage(img);
        } 
        catch (IOException ex)
        {
            Logger.getLogger(MineField.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        MainPanelSeparator.setSize((int)360, 1);
        MainPanelSeparator.setPreferredSize(MainPanelSeparator.getSize());
        chrono = new Timer(1000, this);
        ChronoLabel.setText(String.format("%02d", seconds));
        
        initFromDialog = false;
 
    }

    enum CentralButtonImage {
    SMILE,
    SMILEPRESSED,
    SAD,
    SURPRISE,
    WIN
    }
    
    private void setCentralButtonImage(CentralButtonImage _status)
    {
        String iconName ="";
        
        switch(_status)
        {
            case SMILE:
                iconName = "/resources/Smile02.png";
                break;
                
            case SMILEPRESSED:
                iconName = "/resources/Smile02Pressed.png";
                break;
                
            case SAD:
                iconName = "/resources/Sad.png";
                break;
                
            case SURPRISE:
                iconName = "/resources/Surprise.png";
                break;
                
            case WIN:
            iconName = "/resources/Win.png";
            break;
        }
        
        try
        {
            Image img = ImageIO.read(getClass().getResource(iconName));
            CentralButton.setIcon(new ImageIcon(img));
        }
        catch (IOException ex)
        {
            System.out.println(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner3 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        MinesPanel = new javax.swing.JPanel();
        MainPanelSeparator = new javax.swing.JSeparator();
        AbovePanel = new javax.swing.JPanel();
        ChronoLabel = new javax.swing.JLabel();
        CentralButton = new javax.swing.JButton();
        MinesLabel = new javax.swing.JLabel();
        MainMenu = new javax.swing.JMenuBar();
        Game = new javax.swing.JMenu();
        NewGame = new javax.swing.JMenuItem();
        RevealsMines = new javax.swing.JMenuItem();
        MainMenuSeparator = new javax.swing.JPopupMenu.Separator();
        ExitGame = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        jLabel3.setText("Height");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lillilor MineFiels");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MinesPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout MinesPanelLayout = new javax.swing.GroupLayout(MinesPanel);
        MinesPanel.setLayout(MinesPanelLayout);
        MinesPanelLayout.setHorizontalGroup(
            MinesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );
        MinesPanelLayout.setVerticalGroup(
            MinesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        getContentPane().add(MinesPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        MainPanelSeparator.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(MainPanelSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, -1, 5));

        AbovePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        AbovePanel.setLayout(null);

        ChronoLabel.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        ChronoLabel.setForeground(new java.awt.Color(255, 0, 0));
        ChronoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChronoLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        ChronoLabel.setOpaque(true);
        ChronoLabel.setPreferredSize(new java.awt.Dimension(75, 75));
        AbovePanel.add(ChronoLabel);
        ChronoLabel.setBounds(10, 7, 75, 75);

        CentralButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Smile02.png"))); // NOI18N
        CentralButton.setBorder(null);
        CentralButton.setBorderPainted(false);
        CentralButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CentralButtonMousePressed(evt);
            }
        });
        CentralButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CentralButtonActionPerformed(evt);
            }
        });
        AbovePanel.add(CentralButton);
        CentralButton.setBounds(150, 17, 50, 50);

        MinesLabel.setBackground(new java.awt.Color(153, 153, 153));
        MinesLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        MinesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MinesLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        MinesLabel.setPreferredSize(new java.awt.Dimension(75, 75));
        AbovePanel.add(MinesLabel);
        MinesLabel.setBounds(285, 5, 75, 75);

        getContentPane().add(AbovePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        Game.setText("Game");

        NewGame.setText("New Game...");
        NewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewGameActionPerformed(evt);
            }
        });
        Game.add(NewGame);

        RevealsMines.setText("Reveals mines");
        RevealsMines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RevealsMinesActionPerformed(evt);
            }
        });
        Game.add(RevealsMines);
        Game.add(MainMenuSeparator);

        ExitGame.setText("Exit");
        ExitGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitGameActionPerformed(evt);
            }
        });
        Game.add(ExitGame);

        MainMenu.add(Game);

        Help.setText("Help");

        About.setText("About mineField");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        MainMenu.add(Help);

        setJMenuBar(MainMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CentralButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CentralButtonActionPerformed
        initFromDialog = true;
        chrono.stop();
        this.setCentralButtonImage(CentralButtonImage.SMILE);
        this.initPanel();
    }//GEN-LAST:event_CentralButtonActionPerformed

    private void NewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewGameActionPerformed
        // TODO add your handling code here:
        
        boolean closeOk;
        
        NewGameDlg dialog = new NewGameDlg(this, true); 
        
        dialog.putToDialog(columns, rows, minesPercent);
        dialog.setVisible(true);
        
        closeOk = dialog.closeOk;
        initFromDialog = true;
        
        if(closeOk)
        {
            rows            = dialog.cols;
            columns         = dialog.rows;
            minesPercent    = dialog.minesPct;
            
            this.initPanel();
        } 
    }//GEN-LAST:event_NewGameActionPerformed

    private void ExitGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitGameActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_ExitGameActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "MineFiled\nVer 1.0\n22/09/2011\nPowered by:\nlillilor","MineFiled",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_AboutActionPerformed

    private void RevealsMinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RevealsMinesActionPerformed
        // TODO add your handling code here:
        this.revealFieldWin();
    }//GEN-LAST:event_RevealsMinesActionPerformed

    private void CentralButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CentralButtonMousePressed
        // TODO add your handling code here:
        this.setCentralButtonImage(CentralButtonImage.SMILEPRESSED);
    }//GEN-LAST:event_CentralButtonMousePressed

    private void createComponentMap() 
    {
        componentMap = new HashMap<String,Component>();
        Component[] components =  MinesPanel.getComponents();
        for (Component component : components)
        {
            componentMap.put(component.getName(), component);
        }
    }

    public javax.swing.JToggleButton getComponentByName(String _name) 
    {
        if (componentMap.containsKey(_name))
        {
            return (javax.swing.JToggleButton) componentMap.get(_name);
        }
        else
        {
            return null;
        }
    }
 
    public void initInternal()
    {
        tileWidht   = 36;//(int)jSpinner4.getValue();
        tileHeight  = 36;//tileWidht;
        
    
        if(!initFromDialog)
        {
            columns     = 11;//(int) jSpinner1.getValue();
            rows        = 10;//(int) jSpinner2.getValue();
            minesPercent = 20;//(int)jSpinner4.getValue(); 
        }
 
        
        MatrixField = new boolean [ columns ] [ rows ];
        loose       = false;
        totoalMines = 0;
        markedMines = 0;
        seconds     = 0;
    }
    
    public int getMienesAround(Tile _tile)
    {
        int i,j, mines = 0;
        
        for(j = (_tile.getJ() -1) ; j<= (_tile.getJ() + 1); j ++)
        {
            for(i = (_tile.getI() -1) ; i<= (_tile.getI()+ 1); i ++)
            {
                if(i>=0 && j>=0 && i< columns && j< rows)
                {
                    if(MatrixField[i][j])
                    {
                        mines ++;
                    }
                }
            }
        }
        
        return mines;
    }
    
    public boolean isMinesAround(Tile _tile)
    {   
        int         i,j, mines;// = 0;
        Tile        nextSafeTile;
        boolean     ret = false;
        String      componentName;

         for(j = (_tile.getJ() -1) ; j<= (_tile.getJ() + 1); j ++)
        {
            for(i = (_tile.getI() -1) ; i<= (_tile.getI()+ 1); i ++)
            {
                if(i>=0 && j>=0 && i< columns && j< rows)
                {
                    componentName = "Tile_"+Integer.toString(j)+"_"+Integer.toString(i);//String.format("Tile_%d_%d",j , i);
                    nextSafeTile = (Tile) this.getComponentByName(componentName);
                    mines = this.getMienesAround(nextSafeTile);
                    
                    if(mines > 0)
                    {
                        return true;
                    }
                }
            }
        }
         
        return ret;
    }
    
    public void explodeSafe(Tile _tile)
    {
        int i,j,mines;//=0;
        Tile nextSafeTile;
        
        for(j = (_tile.getJ() -1) ; j<= (_tile.getJ() + 1); j ++)
        {
            for(i = (_tile.getI() -1) ; i<= (_tile.getI()+ 1); i ++)
            {
                if(i>=0 && j>=0 && i< columns && j< rows)
                {
                     nextSafeTile = (Tile) this.getComponentByName("Tile_"+Integer.toString(j)+"_"+Integer.toString(i));
                     mines = this.getMienesAround(nextSafeTile);
                     /*
                     if(nextSafeTile.getPressed() == false 
                        && mines == 0)        
                     {
                        nextSafeTile.setPressed(true,mines);
                        this.calls ++;
                        this.explodeSafe(nextSafeTile);
                     }
                     else
                     {
                         if(mines > 0)
                         {
                             nextSafeTile.setPressed(true,mines);
                         }
                     }*/
                     if(nextSafeTile.getPressed() == false)
                     {
                         if(mines == 0)
                         {
                            nextSafeTile.setPressed(true,mines);
                            this.calls ++;
                            this.explodeSafe(nextSafeTile);
                         }
                         else
                         {
                             nextSafeTile.setPressed(true,mines);
                         }
                     }
                }
            }
        }    
    }
    
    public void pushTile(Tile _tile)
    {
        int mines;
        mines = this.getMienesAround(_tile);
        
        if(_tile.getState() == 2)
        {
            return;
        }
        
        if(loose)
        {
            return;
        }
        
        if(_tile.isBomb())
        {
            this.revealField();

            loose = true;
            
            chrono.stop();
            timeStarted = false;
 
            this.setCentralButtonImage(CentralButtonImage.SAD);
        }
        else
        {
            this.setCentralButtonImage(CentralButtonImage.SMILE);
            
            if(mines > 0)
            {
               //_tile.setText(String.format("%d",mines));
            }
            else
            {
               this.explodeSafe(_tile);  
            }
        }
        
        _tile.setPressed(true,mines); 
        
        if(loose == true)
        {
            _tile.setBombImageCurrent();
        }
        
        if(this.checkWin())
        {
            this.revealFieldWin();
            chrono.stop();
            timeStarted = false;
 
            this.setCentralButtonImage(CentralButtonImage.WIN);
        }
    }
    
    public boolean checkWin()
    {
        boolean[][] matrix;
       int i,j;
       Tile bombTile;
       boolean ret = true;
       
       matrix = new boolean [ columns ] [ rows ];
       
        for(j = 0 ; j < rows; j ++)
        {
            for(i = 0 ; i< columns ; i ++)
            {
                bombTile = (Tile) this.getComponentByName(String.format("Tile_%d_%d",j , i));
                
                if(bombTile.getPressed() == false || bombTile.getState() == 2)
                {
                    matrix[i][j] = true;
                }
            }
        } 
        
        for(j = 0 ; j < rows; j ++)
        {
            for(i = 0 ; i< columns ; i ++)
            {
                if(matrix[i][j] != MatrixField[i][j] )
                {
                    return false;
                }
            }
        }
        
        return ret;
    }
    
    public void revealField()
    {
        int i,j;
        Tile bombTile;

        for(j = 0 ; j< rows ; j ++)
        {
            for(i = 0 ; i < columns ; i ++)
            {
               
                if(MatrixField[i][j])
                {
                    bombTile = (Tile) this.getComponentByName(String.format("Tile_%d_%d",j , i));
                    bombTile.setPressed(true,0);
                }
            }
        }
    }
    
    public void revealFieldWin()
    {
        int i,j;
        Tile bombTile;

        for(j = 0 ; j< rows ; j ++)
        {
            for(i = 0 ; i < columns ; i ++)
            {
               
                if(MatrixField[i][j])
                {
                    bombTile = (Tile) this.getComponentByName(String.format("Tile_%d_%d",j , i));
                    bombTile.setState(2);
                    bombTile.setMarkTile();
                }
            }
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e)
    {
        if(e.getSource() instanceof Timer)
        {
            seconds ++;
            ChronoLabel.setText(String.format("%02d", seconds));  
        }
        
        if(!timeStarted)
        {
            chrono.start();
            timeStarted = true;
        }
        
        if(e.getSource() instanceof Tile)
        {
            Tile tile = (Tile)e.getSource();

            if(tile.canBePressed())
            {
                this.pushTile(tile);
            }
        }   
    }
    
    @Override
    public void mouseClicked(MouseEvent e)
    {
        Tile tile = (Tile)e.getSource();
        int newState = tile.getState();
        int oldState = newState;
        int mines = totoalMines;

        if (SwingUtilities.isRightMouseButton(e))
        {
            if(tile.getPressed())
            {
                return;
            }
            
            newState  = (newState + 1) % 3; 
            tile.setState(newState);
            tile.setMarkTile();
            
            if(newState == 2)
            {
                markedMines ++;
            }
            else
            {
                if(oldState == 2 && newState != 2)
                {
                    markedMines --;  
                }
            }
            
            MinesLabel.setText(String.format("%d",(mines - markedMines)));
        }  
    }
    
    public void initPanel()
    {
        Dimension WindowsSize;
        int i,j;
        int FormWidth,FormHeight;
        
        
        this.initInternal();

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        
        MinesPanel.setSize(new Dimension((columns * tileHeight) - (4*columns) + 4, (rows * tileWidht) - (4*rows) + 4));
        MinesPanel.setPreferredSize(MinesPanel.getSize());
        MinesPanel.setBackground(new java.awt.Color(204, 204, 204));
        MinesPanel.removeAll();
 
        for(i = 0; i< columns; i++)
        {
            for(j=0; j< rows; j++)
            {
                Tile tile = Tile.construct(tileWidht, tileHeight,i,j,columns, rows,minesPercent);
                tile.addActionListener(this);
                tile.addMouseListener((MouseListener) this);
                MatrixField[i][j] = tile.isBomb();
                MinesPanel.add(tile);
                
                if(tile.isBomb())
                {
                    totoalMines ++;
                }
            }
        }

        FormWidth = (columns * tileHeight) - (4*columns) + 4 + 25 + 10;
        FormHeight = (rows * tileWidht) - (4*rows) + 4 + 180 + 10;
        
        if(FormWidth < 381)
        {
            FormWidth = 381;
        }
        
        WindowsSize = new Dimension(FormWidth,FormHeight);
        
        this.setSize(WindowsSize);
        this.setPreferredSize(WindowsSize);
        
        if(!gameStartPosition)
        {
            this.setLocation((int) (screenSize.getWidth() / 2 - this.getWidth() /2),
                              (int) (screenSize.getHeight()/ 2 - this.getHeight()/2));
            
            gameStartPosition = true;
        }
        
        MainPanelSeparator.setSize((int) WindowsSize.getWidth()-5, 1);
        MainPanelSeparator.setPreferredSize(MainPanelSeparator.getSize());

        MinesLabel.setText(String.format("%d",totoalMines));
        
        ChronoLabel.setText(String.format("%02d",seconds));
        
        
        
        AbovePanel.setSize((int) WindowsSize.getWidth() - 25 - 10,90);
        AbovePanel.setPreferredSize(AbovePanel.getSize());//set(jPanel5.getWidth(),90);
        MinesLabel.setLocation((AbovePanel.getWidth() - (MinesLabel.getWidth()) - 10),7);
        CentralButton.setLocation((AbovePanel.getWidth()/2) - (CentralButton.getWidth() /2), 20 );
        
        RevealsMines.setVisible(devMode);
        
        this.setResizable(false);
        
        this.repaint();
        this.createComponentMap(); 
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
         
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            String firstArg="";
            
            for (String s: args)
            {
                firstArg = args[0];  
            }
            
            MineField theGame = new MineField();
            
            if("-dev".equals(firstArg))
            {
                theGame.devMode = true;
            }
            
            theGame.setVisible(true);
            theGame.initPanel();
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JPanel AbovePanel;
    private javax.swing.JButton CentralButton;
    private javax.swing.JLabel ChronoLabel;
    private javax.swing.JMenuItem ExitGame;
    private javax.swing.JMenu Game;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JPopupMenu.Separator MainMenuSeparator;
    private javax.swing.JSeparator MainPanelSeparator;
    private javax.swing.JLabel MinesLabel;
    private javax.swing.JPanel MinesPanel;
    private javax.swing.JMenuItem NewGame;
    private javax.swing.JMenuItem RevealsMines;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner jSpinner3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mousePressed(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (SwingUtilities.isLeftMouseButton(me))
        {
            this.setCentralButtonImage(CentralButtonImage.SURPRISE);
        }
    }

    @Override
    public void mouseReleased(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
