/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minefield;

import java.awt.Dimension;
import java.util.HashMap;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;


/**
 *
 * @author lilli
 */
public class MineField extends javax.swing.JFrame implements ActionListener, MouseListener{

    int tileWidht;// = 20;
    int tileHeight;// = 20;
    int columns;// = 10;
    int rows;//  = 10;
    int minesPercent;
    boolean[][] MatrixField;// = new int [ width ] [ height ];
    HashMap componentMap;
    boolean loose = false;
    int totoalMines;
    int markedMines;
    
    int calls;
    Timer chrono;
    int seconds;
    boolean timeStarted;
    boolean initFromDialog;
    boolean gameStartPosition;
    boolean devMode;
    /**
     * Creates new form DialogParams
     */
    public MineField()
    {
        initComponents();
        Image img;
                
        try
        {
            img = ImageIO.read(getClass().getResource("/resources/MineField.png"));
            this.setIconImage(img);
        } 
        catch (IOException ex)
        {
            Logger.getLogger(MineField.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jSeparator1.setSize((int)360, 1);
        jSeparator1.setPreferredSize(jSeparator1.getSize());
        chrono = new Timer(1000, this);
        jLabel5.setText(String.format("%02d", seconds));
        
        initFromDialog = false;
 
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner3 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        jLabel3.setText("Height");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lillilor MineFiels");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jSeparator1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, -1, 5));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel5.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel5.setPreferredSize(new java.awt.Dimension(75, 75));
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 7, 75, 75);

        jButton1.setText("OK");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setPreferredSize(new java.awt.Dimension(50, 50));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(150, 17, 50, 50);

        jLabel7.setBackground(new java.awt.Color(153, 153, 153));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel7.setPreferredSize(new java.awt.Dimension(75, 75));
        jPanel1.add(jLabel7);
        jLabel7.setBounds(285, 5, 75, 75);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jMenu1.setText("Game");

        jMenuItem1.setText("New Game...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem4.setText("Reveals mines");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator2);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem3.setText("About mineField");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        initFromDialog = true;
        this.initPanel();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        
        boolean closeOk;
        
        NewGameDlg dialog = new NewGameDlg(this, true); 
        
        dialog.putToDialog(columns, rows, minesPercent);
        dialog.setVisible(true);
        
        closeOk = dialog.closeOk;
        initFromDialog = true;
        
        if(closeOk)
        {
            rows            = dialog.cols;
            columns         = dialog.rows;
            minesPercent    = dialog.minesPct;
            
            this.initPanel();
        } 
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "MineFiled\nVer 1.0\n22/09/2011\nPowered by:\nlillilor","MineFiled",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        this.revealFieldWin();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void createComponentMap() 
    {
        componentMap = new HashMap<String,Component>();
        Component[] components =  jPanel5.getComponents();
        for (Component component : components)
        {
            componentMap.put(component.getName(), component);
        }
    }

    public javax.swing.JToggleButton getComponentByName(String _name) 
    {
        if (componentMap.containsKey(_name))
        {
            return (javax.swing.JToggleButton) componentMap.get(_name);
        }
        else
        {
            return null;
        }
    }
 
    public void initInternal()
    {
        tileWidht   = 36;//(int)jSpinner4.getValue();
        tileHeight  = 36;//tileWidht;
        
    
        if(!initFromDialog)
        {
            columns     = 11;//(int) jSpinner1.getValue();
            rows        = 10;//(int) jSpinner2.getValue();
            minesPercent = 20;//(int)jSpinner4.getValue(); 
        }
 
        
        MatrixField = new boolean [ columns ] [ rows ];
        loose       = false;
        totoalMines = 0;
        markedMines = 0;
        seconds     = 0;
    }
    
    public int getMienesAround(Tile _tile)
    {
        int i,j, mines = 0;
        
        for(j = (_tile.getJ() -1) ; j<= (_tile.getJ() + 1); j ++)
        {
            for(i = (_tile.getI() -1) ; i<= (_tile.getI()+ 1); i ++)
            {
                if(i>=0 && j>=0 && i< columns && j< rows)
                {
                    if(MatrixField[i][j])
                    {
                        mines ++;
                    }
                }
            }
        }
        
        return mines;
    }
    
    public boolean isMinesAround(Tile _tile)
    {   
        int         i,j, mines;// = 0;
        Tile        nextSafeTile;
        boolean     ret = false;
        String      componentName;

         for(j = (_tile.getJ() -1) ; j<= (_tile.getJ() + 1); j ++)
        {
            for(i = (_tile.getI() -1) ; i<= (_tile.getI()+ 1); i ++)
            {
                if(i>=0 && j>=0 && i< columns && j< rows)
                {
                    componentName = "Tile_"+Integer.toString(j)+"_"+Integer.toString(i);//String.format("Tile_%d_%d",j , i);
                    nextSafeTile = (Tile) this.getComponentByName(componentName);
                    mines = this.getMienesAround(nextSafeTile);
                    
                    if(mines > 0)
                    {
                        return true;
                    }
                }
            }
        }
         
        return ret;
    }
    
    public void explodeSafe(Tile _tile)
    {
        int i,j,mines;//=0;
        Tile nextSafeTile;
        
        for(j = (_tile.getJ() -1) ; j<= (_tile.getJ() + 1); j ++)
        {
            for(i = (_tile.getI() -1) ; i<= (_tile.getI()+ 1); i ++)
            {
                if(i>=0 && j>=0 && i< columns && j< rows)
                {
                     nextSafeTile = (Tile) this.getComponentByName("Tile_"+Integer.toString(j)+"_"+Integer.toString(i));
                     mines = this.getMienesAround(nextSafeTile);

                     if(nextSafeTile.getPressed() == false 
                        && mines == 0)        
                     {
                        nextSafeTile.setPressed(true,mines);
                        this.calls ++;
                        this.explodeSafe(nextSafeTile);
                     }
                     else
                     {
                         if(mines > 0)
                         {
                             nextSafeTile.setPressed(true,mines);
                         }
                     }
                }
            }
        }    
    }
    
    public void pushTile(Tile _tile)
    {
        int mines;
        mines = this.getMienesAround(_tile);
        
        if(_tile.getState() == 2)
        {
            return;
        }
        
        if(loose)
        {
            return;
        }
        
        if(_tile.isBomb())
        {
            this.revealField();
            
            loose = true;
            
            chrono.stop();
            timeStarted = false;
            
            Image img;
            
            ImageIcon imageIcon;
            
            try
            {
                img = ImageIO.read(getClass().getResource("/resources/loose.png"));
                imageIcon = new ImageIcon(img);
                JOptionPane.showMessageDialog(this, "YOU LOOSE","Mine Field",JOptionPane.ERROR_MESSAGE, imageIcon);
            } catch (IOException ex)
            {
                Logger.getLogger(MineField.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        else
        {
            if(mines > 0)
            {
               //_tile.setText(String.format("%d",mines));
            }
            else
            {
               this.explodeSafe(_tile);  
            }
        }
        
        _tile.setPressed(true,mines); 
        
        if(this.checkWin())
        {
            this.revealFieldWin();
            chrono.stop();
            timeStarted = false;
            Image img;
            
            ImageIcon imageIcon;
            
            try
            {
                img = ImageIO.read(getClass().getResource("/resources/smile.png"));
                imageIcon = new ImageIcon(img);
                JOptionPane.showMessageDialog(this, "***YOU WIN!***","Mine Field",JOptionPane.INFORMATION_MESSAGE, imageIcon);
            } catch (IOException ex)
            {
                Logger.getLogger(MineField.class.getName()).log(Level.SEVERE, null, ex);
            }


            System.out.println(String.format("%d",this.calls));  
        }
    }
    
    public boolean checkWin()
    {
        boolean[][] matrix;
       int i,j;
       Tile bombTile;
       boolean ret = true;
       
       matrix = new boolean [ columns ] [ rows ];
       
        for(j = 0 ; j < rows; j ++)
        {
            for(i = 0 ; i< columns ; i ++)
            {
                bombTile = (Tile) this.getComponentByName(String.format("Tile_%d_%d",j , i));
                
                if(bombTile.getPressed() == false || bombTile.getState() == 2)
                {
                    matrix[i][j] = true;
                }
            }
        } 
        
        for(j = 0 ; j < rows; j ++)
        {
            for(i = 0 ; i< columns ; i ++)
            {
                if(matrix[i][j] != MatrixField[i][j] )
                {
                    return false;
                }
            }
        }
        
        return ret;
    }
    
    public void revealField()
    {
        int i,j;
        Tile bombTile;

        for(j = 0 ; j< rows ; j ++)
        {
            for(i = 0 ; i < columns ; i ++)
            {
               
                if(MatrixField[i][j])
                {
                    bombTile = (Tile) this.getComponentByName(String.format("Tile_%d_%d",j , i));
                    bombTile.setPressed(true,0);
                }
            }
        }
    }
    
    public void revealFieldWin()
    {
        int i,j;
        Tile bombTile;

        for(j = 0 ; j< rows ; j ++)
        {
            for(i = 0 ; i < columns ; i ++)
            {
               
                if(MatrixField[i][j])
                {
                    bombTile = (Tile) this.getComponentByName(String.format("Tile_%d_%d",j , i));
                    bombTile.setState(2);
                    bombTile.setMarkTile();
                }
            }
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e)
    {
        if(e.getSource() instanceof Timer)
        {
            seconds ++;
            jLabel5.setText(String.format("%02d", seconds));  
        }
        
        if(!timeStarted)
        {
            chrono.start();
            timeStarted = true;
        }
        
        if(e.getSource() instanceof Tile)
        {
            Tile tile = (Tile)e.getSource();

            if(tile.canBePressed())
            {
                this.pushTile(tile);
            }
        }   
    }
    
    @Override
    public void mouseClicked(MouseEvent e)
    {
        Tile tile = (Tile)e.getSource();
        int newState = tile.getState();
        int oldState = newState;
        int mines = totoalMines;

        if (SwingUtilities.isRightMouseButton(e))
        {
            if(tile.getPressed())
            {
                return;
            }
            
            newState  = (newState + 1) % 3; 
            tile.setState(newState);
            tile.setMarkTile();
            
            if(newState == 2)
            {
                markedMines ++;
            }
            else
            {
                if(oldState == 2 && newState != 2)
                {
                    markedMines --;  
                }
            }
            
            jLabel7.setText(String.format("%d",(mines - markedMines)));
        }  
    }
    
    public void initPanel()
    {
        Dimension WindowsSize;
        int i,j;
        int FormWidth;
        
        
        this.initInternal();

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        
        jPanel5.setSize(new Dimension((columns * tileHeight) - (4*columns) + 4, (rows * tileWidht) - (4*rows) + 4));
        jPanel5.setPreferredSize(jPanel5.getSize());
        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.removeAll();
 
        for(i = 0; i< columns; i++)
        {
            for(j=0; j< rows; j++)
            {
                Tile tile = Tile.construct(tileWidht, tileHeight,i,j,columns, rows,minesPercent);
                tile.addActionListener(this);
                tile.addMouseListener((MouseListener) this);
                MatrixField[i][j] = tile.isBomb();
                jPanel5.add(tile);
                
                if(tile.isBomb())
                {
                    totoalMines ++;
                }
            }
        }

        FormWidth = (columns * tileHeight) - (4*columns) + 4 + 25;
        
        if(FormWidth < 381)
        {
            FormWidth = 381;
        }
        
        WindowsSize = new Dimension(FormWidth,
                                    (rows * tileWidht) - (4*rows) + 4 + 180
                                    );
        
        this.setSize(WindowsSize);
        this.setPreferredSize(WindowsSize);
        
        if(!gameStartPosition)
        {
            this.setLocation((int) (screenSize.getWidth() / 2 - this.getWidth() /2),
                              (int) (screenSize.getHeight()/ 2 - this.getHeight()/2));
            
            gameStartPosition = true;
        }
        
        jSeparator1.setSize((int) WindowsSize.getWidth()-5, 1);
        jSeparator1.setPreferredSize(jSeparator1.getSize());

        jLabel7.setText(String.format("%d",totoalMines));
        
        jLabel5.setText(String.format("%02d",seconds));
        
        
        
        jPanel1.setSize((int) WindowsSize.getWidth() - 25,90);
        jPanel1.setPreferredSize(jPanel1.getSize());//set(jPanel5.getWidth(),90);
        jLabel7.setLocation((jPanel1.getWidth() - (jLabel7.getWidth()) - 10),7);
        jButton1.setLocation((jPanel1.getWidth()/2) - (jButton1.getWidth() /2), 20 );
        
        jMenuItem4.setVisible(devMode);
        
        this.setResizable(false);
        
        this.repaint();
        this.createComponentMap(); 
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MineField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
         
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            String firstArg="";
            
            for (String s: args)
            {
                firstArg = args[0];  
            }
            
            MineField theGame = new MineField();
            
            if("-dev".equals(firstArg))
            {
                theGame.devMode = true;
            }
            
            theGame.setVisible(true);
            theGame.initPanel();
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSpinner jSpinner3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mousePressed(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
